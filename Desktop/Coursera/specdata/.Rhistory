ask <- 1.0019
spread <- ask - bid
spread
is.double(spread)
object <- spread
c(typeof = typeof(object), mode =mode(object), storag.mode =storage.mode(object), class = class(object))
timeStamps <- c("1973-12-09", "1974-08-29")
Date <- as.Date(timeStamps, "%Y-%m-%d")
Date
timeStamps
class(timeStamps)
class(Date)
object <- Date
c(typeof = typeof(object), mode =mode(object), storag.mode =storage.mode(object), class = class(object))
Date + 19
difftime <- Date[2] - Date[1]
difftime
object <- difftime
c(typeof = typeof(object), mode =mode(object), storag.mode =storage.mode(object), class = class(object))
args(quantile)
tmean <- function(x,k){
xt <- quantile(x, c(k, 1-k))
mean(x[x>xt[1] & s < xt[2])
}
tmean <- function(x,k){
xt <- quantile(x, c(k, 1-k))
mean(x[x>xt[1] & s < xt[2]])
}
x <- 1:20
tmean(x,k)
k<-1
tmean(x,k)
tmean(x,0.05)
test <- rnorm(100)
tmean(test, 0.05)
tmean <- function(x,k){
xt <- quantile(x, c(k, 1-k))
mean(x[x>xt[1] & x < xt[2]])
}
x <-1:20
k <-05
tmean(x,k)
k <-0.5
tmean(x,k)
test <- rnorm(100)
tmean(test, 0.05)
test <- function(x){
sqrt(x)
}
test(36)
test(4)
power <- function(x, n){
x^n
}
power(x = 9, n= 3)
power(2, 3)
args(seq)
sinPlot <- function(xup = 2 * pi, ...){
x <- seq(0, xup, l = 100)
plot(x, sin(x), type = "l", ...)
}
args(plot)
sinPlot()
sinPlot(col ="red")
x <- 0
reassign <- function(){
x <- 3
}
x <- 0
x
reassign(x)
reassign()
x
x <- 0
reassign()
reassign <- function(x){
x <- 3
}
x <- 1:20
x
reassign(x)
x
ressign(x = 3)
reassign(x = 3)
x
x <- reassign()
x
x <- 2
x
x <- reassign()
x
sumSinCos <- function(x,y){
Sin <- sinx
Cos <- cosx
Sin + Cos
}
sumSinCos(30,60)
sumSinCos <- function(x,y){
Sin <- sin(x)
Cos <- cos(x)
Sin + Cos
}
sumSinCos(30,60)
sumSinCos <- function(x,y){
Sin <- sin(x)
Cos <- cos(x)
Sin + Cos
list(Sin, Cos, Sum = Sin + Cos)
}
sumSinCos(30,60)
SinCos <- function(x,y){
Sin <- sin(x)
Cos <- cos(y)
if (Cos > 0) {
return(Sin + Cos)
}
else {
return(Sin - Cos)
}
}
SinCos(60, 90)
SinCos(30, 60)
args(methofs)
args(methods)
methods(plot)
myScope <- function(x){
y <- 6
z <- x + y + a1
a2 <- 9
insidef = function(p){
tmp <- p + a2
sin(tmp)
}
2 * insidef(z)
}
myScope(2)
a1 <- 10
myScope(2)
a2 <- 1000
myScope(2)
myf <- function(x, nc = length(x)){
x <- c(x,x)
print(nc)
}
xin <- 1:10
myf(xin)
logplot <- function(y, ylab =deparse(substitute(y))){
ylab
y <- log(y)
plot(y, ylab = ylab)
}
y < rnorm(1000)
y <- rnorm(100)
logplot(y)
logplot(y, y)
ylab <- 1000
logplot(y,ylab)
y <- 1:1000
ylab <- 1001 <- 10000
ylab <- 1001:10000
logplot(y,ylab)
logplot(y)
y <- rnorm(10000)
logplot(y)
y <- rnorm(100)
logplot(y)
y <- 1:100000
logplot(y)
logplot <- function(y, ylab =deparse(substitute(y))){
ylab
y <- log(y)
plot(y, ylab = ylab)
}
myplus <- function(x, y){
n1 <- length(x)
n2 <- length(y)
if (n1 > n2) {
z <- x[1:n2] + y
}
else{
z <- x + y[1:n1]
}
z
}
x <- 1:1000
y <- 1:500
myplus(x,y)
myplus(1:10,1:3)
mycalc <- function(x, method ="ml"){
switch(method, ml ={
my.mlmethod(x)
}, rml ={
my.rmlmethod(x)
})
}
mcalc(10)
mycalc(10)
x <- (a1 + a2)
a1 <- 1
a2 <- 2
mycalc(x)
x
x <- c(a1 + a2)
x
mycalc(x)
my.mlmethod <- c(a1 + a2)
my.rmlmethod <- c(a1 * a2)
mycalc(x)
args(switch)
arsim <- function(x, phi){
for(i in 2:length(x)){
x[i]<- x[i] + phi * x[i + 1]
}
x
}
arsim(1:10, 0.75)
cube <- function(x,n)
{ x^3}
cube(3)
x <- 1:10
if(x > 5){}
if(x > 5){x <- 0}
x <- 1:10
if(x>5){
x <-0
}
x <- 1:10
if(x>1){
x <-0
}
f <- function(x){
g <- function(y){
y + z
}
z <- 4
x + g(x)
}
f(3)
x <- 5
y <- if(x <3){
NA
}else {
10
}
y
h <- function(x, y = NULL, d = 3L){
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z <- z + f
g <- x + y / z
if(d==3)
return(g)
g <- g + 10
g
}
?environment()
install.packages("swirl")
library(swirl)
swirl()
5 + 7
x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
mySqrt <- sqrt(z-1)
mySqrt
myDiv <- z/mySqrt
myDiv
c(1,2,3,4) + c(0, 10)
c(1,2,3,4) + c(0, 10, 100)
1:20
pi:10
15:1
?`:`
seq(1, 20)
seq(0, 10, by = 0.5)
seq(5, 10, length = 30)
my_seq <- seq(5, 10, length = 30)
length(my_seq)
1:length(my_seq)
seq(along = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0,1,2), times = 10)
rep(c(0,1,2), each = 10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Ashay")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"), sep = " ")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
swirl()
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
myData <- sample(c(y, z), 100)
myNA <- is.na(myData)
myNA
myData == NA
sum(myNA)
myData
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y
y[y>0]
x[x>0]
x[!na(x) & x > 0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
args(identical)
identical(vect, vect2)
vect["bar"]
names(vect)
vect[c("foo","bar")]
myVector <- 1:20
myVector
dim(myVector)
length(myVector)
dim(myVector) <- c(4, 5)
dim(myVector)
attributes(myVector)
myVector
class(myVector)
myMatrix <- myVector
?matrix()
?matrix
myMatrix2 <- matrix(1:20, nrow = 4, ncol = 5)
identical(myMatrix, myMatrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, myMatrix)
myData <- data.frame(patients, myMatrix)
myData
class(myData)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(mydata) <- cnames
colnames(myData) <- cnames
myData
q()
args(read.table)
?read.table
getwd()
getwd()
x <- matrix(1:16, ncol = 4)
x
inv(x)
solve(x)
t(x)
x %*% t(x)
x * t(x)
x
x %*% t(x)
q()
args(setseed)
args(set.seed)
?(set.seed)
?set.seed
set.seed(1)
rpois(5,2)
?rpois
?rbinom
rbinom(10)
args(rbinom
)
pollutantmean <- function(directory, pollutant, id = 1:332){
root <- "C:/Users/Ashay/Desktop/Coursera/specdata"
temp <- NULL
for(i in 1:length(id)){
filenames <- list.files(root, pattern = "*.csv$")
directory <- paste(root, filenames, sep="/")
file <- read.csv(directory[i], header = TRUE)
temp <- rbind.data.frame(temp,file)
names(temp) <- c("Date", "sulfate", "nitrate", "ID")
}
mean1 <- round(mean(temp[ ,"sulfate"], na.rm = TRUE), 3)
mean2 <- round(mean(temp[ ,"nitrate"], na.rm = TRUE), 3)
ifelse(pollutant == "sulfate", mean1, mean2)
}
pollutantmean <- function(directory, pollutant, id = 1:332){
root <- "C:/Users/Ashay/Desktop/Coursera/specdata"
GrandTotal <- NULL
for(i in 1:length(id)){
print(paste(GrandTotal, "+", i, "=", GrandTotal + i, sep = ""))
GrandTotal <- GrandTotal + i
}
print(GrandTotal)
}
pollutantmean(directory, "sulfate", 23)
pollutantmean <- function(directory, pollutant, id = 1:332){
root <- "C:/Users/Ashay/Desktop/Coursera/specdata"
temp <- NULL
for(i in 1:length(id)){
filenames <- list.files(root, pattern = "*.csv$")
directory <- paste(root, filenames, sep="/")
file <- read.csv(directory[i], header = TRUE)
temp <- rbind.data.frame(temp,file)
names(temp) <- c("Date", "sulfate", "nitrate", "ID")
}
mean1 <- round(mean(temp[ ,"sulfate"], na.rm = TRUE), 3)
mean2 <- round(mean(temp[ ,"nitrate"], na.rm = TRUE), 3)
ifelse(pollutant == "sulfate", mean1, mean2)
}
pollutantmean(directory, "sulfate", 23)
pollutantmean(directory, "sulfate", 1)
pollutantmean(directory, "sulfate", 55)
pollutantmean(directory, "nitrate", 55)
pollutantmean(directory, "nitrate", 1)
q()
pollutantmean <- function(directory, pollutant, id = 1:332) {
root <- "C:/Users/Ashay/Desktop/Coursera/specdata"
data = numeric()
for (i in id) {
newRead = read.csv(paste(directory, "/", formatC(i, width = 3, flag = "0"),
".csv", sep = ""))
data = c(data, newRead[[pollutant]])
}
return(mean(data, na.rm = TRUE))
}
pollutantmean("specdata", "nitrate", 23)
setwd("C:/Users/Ashay/Desktop/Coursera/specdata")
pollutantmean <- function(directory, pollutant, id = 1:332) {
root <- "C:/Users/Ashay/Desktop/Coursera/specdata"
data = numeric()
for (i in id) {
newRead = read.csv(paste(directory, "/", formatC(i, width = 3, flag = "0"),
".csv", sep = ""))
data = c(data, newRead[[pollutant]])
}
return(mean(data, na.rm = TRUE))
}
pollutantmean("specdata", "nitrate", 23)
pollutantmean <- function(directory, pollutant, id = 1:332) {
data = numeric()
for (i in id) {
newRead = read.csv(paste(directory, "/", formatC(i, width = 3, flag = "0"),
".csv", sep = ""))
data = c(data, newRead[[pollutant]])
}
return(mean(data, na.rm = TRUE))
}
pollutantmean("specdata", "nitrate", 23)
setwd("C:/Users/Ashay/Desktop/Coursera/specdata")
ls
list
setwd("C:/Users/Ashay/Desktop/Coursera/specdata")
getwd()
pollutantmean <- function(directory, pollutant, id = 1:332) {
data = numeric()
for (i in id) {
newRead = read.csv(paste(directory, "/", formatC(i, width = 3, flag = "0"),
".csv", sep = ""))
data = c(data, newRead[[pollutant]])
}
return(mean(data, na.rm = TRUE))
}
pollutantmean("specdata", "nitrate", 23)
pollutantmean <- function(directory, pollutant, id = 1:332) {
data = lapply(id, function(i) read.csv(paste(directory, "/", formatC(i,
width = 3, flag = "0"), ".csv", sep = ""))[[pollutant]])
return(mean(unlist(data), na.rm = TRUE))
}
pollutantmean("specdata", "nitrate", 23)
pollutantmean <- function(directory, pollutant, id = 1:332){
root <- "C:/Users/Ashay/Desktop/Coursera/specdata"
temp <- NULL
for(i in 1:length(id)){
filenames <- list.files(root, pattern = "*.csv$")
directory <- paste(root, filenames, sep="/")
file <- read.csv(directory[i], header = TRUE)
temp <- rbind.data.frame(temp,file)
names(temp) <- c("Date", "sulfate", "nitrate", "ID")
}
mean1 <- round(mean(temp[ ,"sulfate"], na.rm = TRUE), 3)
mean2 <- round(mean(temp[ ,"nitrate"], na.rm = TRUE), 3)
ifelse(pollutant == "sulfate", mean1, mean2)
}
pollutantmean("specdata", "nitrate", 23)
pollutantmean <- function(directory, pollutant, id = 1:332) {
data = lapply(id, function(i) read.csv(paste(directory, "/", formatC(i,
width = 3, flag = "0"), ".csv", sep = ""))[[pollutant]])
return(mean(unlist(data), na.rm = TRUE))
}
pollutantmean("specdata", "nitrate", 23)
